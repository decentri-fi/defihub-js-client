"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefihubModule = void 0;
var _protocol = require("./protocol/protocol.service");
var _network = require("./network/network.service");
var _erc = require("./erc20/erc20.service");
var _lending = require("./lending/lending.service");
var _farming = require("./farming/farming.service");
var _pooling = require("./pooling/pooling.service");
var _invest = require("./invest/invest.service");
var _price = require("./price/price.service");
var _statistics = require("./statistics/statistics.service");
var _claiming = require("./claiming/claiming.service");
var _event = require("./events/event.service");
var _exit = require("./exit/exit.service");
var _defihub = require("./defihub.config");
var _company = require("./company/company.service");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DefihubModule = /*#__PURE__*/function () {
  function DefihubModule() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _defihub.DefiHubConfig();
    _classCallCheck(this, DefihubModule);
    this._config = config;
    this._invest = new _invest.InvestService(config);
    this._exit = new _exit.ExitService(config);
    this._lending = new _lending.LendingService(config, this._invest, this._exit);
    this._farming = new _farming.FarmingService(config, this._invest, this._exit);
    this._pooling = new _pooling.PoolingService(config, this._invest, this._exit);
    this._protocols = new _protocol.ProtocolService(config);
    this._companies = new _company.CompanyService(config);
    this._networks = new _network.NetworkService(config);
    this._erc20 = new _erc.ERC20Service(config);
    this._prices = new _price.PriceService(config);
    this._statistics = new _statistics.StatisticsService(config);
    this._claimables = new _claiming.ClaimService(config);
    this._events = new _event.EventService(config);
  }
  _createClass(DefihubModule, [{
    key: "protocols",
    value: function protocols() {
      return this._protocols;
    }
  }, {
    key: "companies",
    value: function companies() {
      return this._companies;
    }
  }, {
    key: "networks",
    value: function networks() {
      return this._networks;
    }
  }, {
    key: "erc20",
    value: function erc20() {
      return this._erc20;
    }
  }, {
    key: "events",
    value: function events() {
      return this._events;
    }
  }, {
    key: "pooling",
    value: function pooling() {
      return this._pooling;
    }
  }, {
    key: "farming",
    value: function farming() {
      return this._farming;
    }
  }, {
    key: "lending",
    value: function lending() {
      return this._lending;
    }
  }, {
    key: "invest",
    value: function invest() {
      return this._invest;
    }
  }, {
    key: "exit",
    value: function exit() {
      return this._exit;
    }
  }, {
    key: "prices",
    value: function prices() {
      return this._prices;
    }
  }, {
    key: "statistics",
    value: function statistics() {
      return this._statistics;
    }
  }, {
    key: "claimables",
    value: function claimables() {
      return this._claimables;
    }
  }]);
  return DefihubModule;
}();
exports.DefihubModule = DefihubModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,